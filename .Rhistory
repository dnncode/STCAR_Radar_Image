#******************************************************
#******************************************************
rm(list = ls())    # clear workspace
#******************************************************
#******************************************************
# Control parameters
#******************************************************
#******************************************************
cluster <- FALSE  # set TRUE for parallel computing on cluster (using the R snow package)
*****************************************************
rm(list = ls())    # clear workspace
#******************************************************
#******************************************************
# Control parameters
#******************************************************
#******************************************************
cluster <- FALSE  # set TRUE for parallel computing on cluster (using the R snow package)
# The code on GitHub only supports the computation on a single machine
#******************************************************
library(sp)
library(rgdal)
library(rgeos)
library(gstat)
library(RColorBrewer)
library(spacetime)
library(selextR) # a special packages created by Vik Gopal
library(timeSeries)
library(fields)
library(MASS)
library(snow)
library(mvtnorm)
library(matrixcalc)
rm(list = ls())    # clear workspace
#******************************************************
#******************************************************
# Control parameters
#******************************************************
#******************************************************
cluster <- FALSE  # set TRUE for parallel computing on cluster (using the R snow package)
# The code on GitHub only supports the computation on a single machine
if (!cluster){
#wd <- "C:/Users/IBM_ADMIN/Desktop/IBM Research/Data and R Code/Weather Vik/liu_xiao/after Vik/QPF-I-IBM"
wd <- "E:/old/IBM Back-up/IBM Research/Data and R Code/Weather Vik/liu_xiao/after Vik/QPF-I-IBM/QPF paper/code/GitHub"
}else{
wd <- "/nfs/home/xiaoliu/Rcode/liu_xiao/QPF-I-IBM"
}
wd.data <- paste(wd,"/Monsoon2010",sep="") # specify the where the data are on t
wd.data = wd # on GibHub, the sample data is saved in the same folder
Monsoon = "Monsoon2010"
setwd(wd)
#******************************************************
#******************************************************
# Packages needed
#******************************************************
#******************************************************
library(sp)
library(rgdal)
library(rgeos)
library(gstat)
library(RColorBrewer)
library(spacetime)
library(selextR) # a special packages created by Vik Gopal
library(timeSeries)
library(fields)
library(MASS)
library(snow)
library(mvtnorm)
library(matrixcalc)
source("SubRoutine.R")
source("TREC_function.R")
source("TREC_function_P1.R")
source("TREC_function_P2.R")
source("QPF-I-IBM-v5-Kernel.R")
source("new_QPF_IBM_v1_Kernel.R")
n.process <- 2
cl <- makeCluster(n.process)
#**
# set coordinates projection system: SVY21 is used for Singapore
SVY21 <- '+proj=tmerc +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0'
frequency <- 5 * 60 # Radar scan frequency, in sec
PLOT <- FALSE # if plots are generated during the code execution
singList <- list("sp.polygons", sgBd)   #
myList <- list("sp.polygons", myBd)
inList <- list("sp.polygons", inBd)
sp.layout.list <- list(singList, myList, inList)
colPalette <- adjustcolor(colorRampPalette(brewer.pal(n=9, 'YlOrRd'))(100), .85)
colPalette2 <- adjustcolor(colorRampPalette(brewer.pal(n=9, 'Blues'))(100), .85)
#colPalette2 <- colorRampPalette(brewer.pal(n=9, 'Greens'))(100)
colPalette1 <- rev(rainbow(32, start=5/6, end=3/6, alpha=0.8))
at.points <- seq(from=-35, to=75, length=33)
filenames = list.files(path = wd.data)
n.storm = length(filenames) # number of storms in the folder
performance.list.A =performance.list.B= list()
paste(wd,"/data",sep="")
wd.data = paste(wd,"/data",sep="") # on GibHub, the sample data is saved in the same folder
Monsoon = "Monsoon2010"
setwd(wd)
library(sp)
library(rgdal)
library(rgeos)
library(gstat)
library(RColorBrewer)
library(spacetime)
library(selextR) # a special packages created by Vik Gopal, which needs to be installed from "selextR_0.1.tar.gz"
library(timeSeries)
library(fields)
library(MASS)
library(snow)
library(mvtnorm)
library(matrixcalc)
#******************************************************
source("SubRoutine.R")
source("TREC_function.R")
source("TREC_function_P1.R")
source("TREC_function_P2.R")
source("new_QPF_IBM_v1_Kernel.R")
n.process <- 2
cl <- makeCluster(n.process)
SVY21 <- '+proj=tmerc +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0'
frequency <- 5 * 60 # Radar scan frequency, in sec
PLOT <- FALSE # if plots are generated during the code execution
singList <- list("sp.polygons", sgBd)   #
myList <- list("sp.polygons", myBd)
inList <- list("sp.polygons", inBd)
sp.layout.list <- list(singList, myList, inList)
colPalette <- adjustcolor(colorRampPalette(brewer.pal(n=9, 'YlOrRd'))(100), .85)
colPalette2 <- adjustcolor(colorRampPalette(brewer.pal(n=9, 'Blues'))(100), .85)
#colPalette2 <- colorRampPalette(brewer.pal(n=9, 'Greens'))(100)
colPalette1 <- rev(rainbow(32, start=5/6, end=3/6, alpha=0.8))
at.points <- seq(from=-35, to=75, length=33)
#setwd(wd.data)
filenames = list.files(path = wd.data)
n.storm = length(filenames) # number of storms in the folder
performance.list.A =performance.list.B= list()
filenames
n.storm
storm.id= 1
setwd(wd.data)
if (!cluster){
#scan <- readRDS("Monsoon2010/scan_list_23")  # load a storm event
scan <- readRDS(filenames[storm.id])  # load a storm event
}else{
#scan <- readRDS("Monsoon2010/scan_list_23")
}
setwd(wd)
plot(scan[[81]], boundaries=TRUE)
# Select radar scans 5 mins apart; only applies to 1km height
Time <- unique(summary(scan)[summary(scan)[,2]==1,1] )  # get the times when scans are taken; 1km above sea level only.
# after loading the Time, need to check if they are 5min apart
# drop the first and last
Time <- strptime(Time,"%Y-%m-%d %H:%M:%S")
Time <- as.POSIXct(Time, tz = "GMT") + 3600*8  # get the time in GMT+8, where Singapore is located
mark <- array(0,dim=c(length(Time),1))
for (i.time in 1:(length(Time)-1)){
temp <- Time[i.time] + 60*5
temp2 <- !is.na(match(temp,Time))
if (temp2){
mark[i.time] <- 1
}
}
if (mark[(length(Time)-1)] == 1){
mark[length(Time)] = 1
}
count <- array(0,dim=c(length(Time),1))
for (i.time in 1: (length(Time))){
sum <- 0
check <- 1
for (i.count in i.time:(length(Time))){
if (mark[i.count]==0){
check <- 0
}
sum <- sum + ( mark[i.count] * check)
}
count[i.time] <- sum
}
Time.select <- Time[which(count == max(count)):( which(count == max(count))+max(count)-1)]
scan.id.select <- which( (summary(scan)[,2]==1) & !is.na(match(summary(scan)[,1],as.character(Time.select-3600*8))) )
n.scan <- length(scan.id.select)
n.scan.end <- n.scan - 6
count
setwd(wd.data)
if (!cluster){
#scan <- readRDS("Monsoon2010/scan_list_23")  # load a storm event
scan <- readRDS(filenames[storm.id])  # load a storm event
}else{
#scan <- readRDS("Monsoon2010/scan_list_23")
}
setwd(wd)
if (FALSE){ # the following few lines are not executed. But the users may use these code to obtain more details of the radar scan and generate the plot
class(scan)  # class: SelexScanList, a user-defined class by the package SelextR
head(summary(scan),n=60)   # summary of radar scan data
n.scan <- nrow(summary(scan))  # number of scans available for this storm event
Time <- (summary(scan)[,1])[seq(1,n.scan,5)]  # times when radar scans are taken
plot(scan[[81]], boundaries=TRUE)  # plot a scan
str(scan[[1]], max=2)
class(scan[[1]]$data) # Format: "SpatialGridDataFrame"
}
#******************************************************
#******************************************************
# Process the timestamps
#******************************************************
#******************************************************
# Select radar scans 5 mins apart; only applies to 1km height
Time <- unique(summary(scan)[summary(scan)[,2]==1,1] )  # get the times when scans are taken; 1km above sea level only.
# after loading the Time, need to check if they are 5min apart
# drop the first and last
Time <- strptime(Time,"%Y-%m-%d %H:%M:%S")
Time <- as.POSIXct(Time, tz = "GMT") + 3600*8  # get the time in GMT+8, where Singapore is located
mark <- array(0,dim=c(length(Time),1))
for (i.time in 1:(length(Time)-1)){
temp <- Time[i.time] + 60*5
temp2 <- !is.na(match(temp,Time))
if (temp2){
mark[i.time] <- 1
}
}
if (mark[(length(Time)-1)] == 1){
mark[length(Time)] = 1
}
count <- array(0,dim=c(length(Time),1))
for (i.time in 1: (length(Time))){
sum <- 0
check <- 1
for (i.count in i.time:(length(Time))){
if (mark[i.count]==0){
check <- 0
}
sum <- sum + ( mark[i.count] * check)
}
count[i.time] <- sum
}
Time.select <- Time[which(count == max(count)):( which(count == max(count))+max(count)-1)]
scan.id.select <- which( (summary(scan)[,2]==1) & !is.na(match(summary(scan)[,1],as.character(Time.select-3600*8))) )
n.scan <- length(scan.id.select)
n.scan.end <- n.scan - 6
# only run the code when the following conditions are satisfied
C1 = (max(count) > 10)
C2 = ((n.scan-1) > 18)   # the number of available radar scan is at least 18 for a storm
scan.select <- scan.id.select[2:n.scan.end ] # the code will run on selected scans.
# after obtaining the scan.select, specifiy two parts:
# start and end of scan for model construction (7 scans are needed)
#scan.select.id.start = 37 # in the numerical example, the value is set to 37
#scan.select.id.end = scan.select.id.start+6 # in the numerical example, the value is set to 37+6
scan.select.id.start = round(length(scan.select)/2)-6 # in the numerical example, the value is set to 37
scan.select.id.end = scan.select.id.start+6 # in the numerical example, the value is set to 37+6
grd <- SpatialPoints(coordinates(scan[[1]]$data),proj4string=CRS(SVY21))
grd.p <- SpatialPixels(grd,proj4string=CRS(SVY21))
n.grd <- length(grd)
# number of TREC centers, i.e., number of boxes
n.TREC.ctr <- 93*93
# TREC array center
TREC.ctr.index <- array(0/0, dim=c(93,93) )
for (i in 1:93){
start <- (i-1)*5+9
TREC.ctr.index[i,] <- seq( (480*start + 10), (480*(start+1)-10), 5)
}
grd.TREC <- grd[TREC.ctr.index]
getwd()
wd.figure = paste(wd,"/output",sep="")
wd.figure = paste(wd,"/output",sep="")
PLOT
setwd(wd.figure); pdf(file = "PixelArray.pdf",   width=4, height=4)
par(mar=c(4,4,1,2))
par(las=TRUE)
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="azure2")
plot(myBd,add=TRUE)
plot(inBd,add=TRUE)
plot(grd.TREC,add=TRUE,col="azure3",lwd=0.1)
dev.off()
setwd(wd)
grd.ctr <- SpatialPoints(cbind(28000,38000),proj4string=CRS(SVY21))
# plot(sgBd,axes=TRUE);plot(grd.ctr,add=TRUE,col='red')
dist <- ( coordinates(grd.TREC)[,1]-coordinates(grd.ctr)[1,1] )^2 + ( coordinates(grd.TREC)[,2]-coordinates(grd.ctr)[1,2] )^2
select.grd <- (dist < 50000^2)  # select grids which are 50km radius from the specified center
grd.SG <- grd.TREC[select.grd] # select grids
# plot(sgBd,axes=TRUE,xlim=c(-20000,80000),ylim=c(-10000,90000));plot(grd.SG,add=TRUE);plot(grd.SG,axes=TRUE)
# length(grd.SG)
# get all grd id associated with each box, and save it in a column
# each box contain 19*19 pixels
box.id <- array(0/0, dim=c(19*19,93*93))
for (i in 1:n.TREC.ctr){
for (j in 1:19){
box.id[  c(((j-1)*19+1):(j*19)),i] <- c(TREC.ctr.index[i]-4329 +(j-1)*480):(TREC.ctr.index[i]-4329 +(j-1)*480 + 18)
}
}
#pdf(file = "../figures/PixelArray2.pdf",   width=12, height=6)
setwd(wd.figure); pdf(file = "PixelArray2.pdf",   width=12, height=6)
par(mfrow=c(1,2))
par(mar=c(4,4,1.5,2))
par(las=TRUE)
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="azure2")
plot(myBd,add=TRUE)
plot(inBd,add=TRUE)
plot(grd.TREC,add=TRUE,col="black",lwd=0.1)
title("(a)")
x.min = min(  c(coordinates(grd[box.id[,2]])[,1],coordinates(grd[box.id[,1]])[,1] ) )
x.max = max(  c(coordinates(grd[box.id[,2]])[,1],coordinates(grd[box.id[,1]])[,1] ) )
y.min = min(  c(coordinates(grd[box.id[,2]])[,2],coordinates(grd[box.id[,1]])[,2] ) )
y.max = max(  c(coordinates(grd[box.id[,2]])[,2],coordinates(grd[box.id[,1]])[,2] ) )+2000
plot(coordinates(grd[box.id[,1]]),ylim=c(y.min,y.max),col="black",axes=TRUE,xlab="",ylab="",pch=3)
points(coordinates(grd[box.id[,2]]),pch=0,col="blue")
points(coordinates(grd.TREC[1]),col="red",pch=20,cex=2)
points(coordinates(grd.TREC[2]),col="red",pch=20,cex=2)
legend("topright",legend=c("pixels from the first pixel array",
"pixels from the second pixel array",
"centers of the two pixel arrays"),
pch=c(3,0,20),col=c("black","blue","red"),bty="n")
title("(b)")
dev.off()
setwd(wd)
box.id.nv <- array(0/0, dim=c(5*5,93*93))  # nv: non-overlapping
for (i in 1:n.TREC.ctr){
for (j in 1:5){
box.id.nv[  c(((j-1)*5+1):(j*5)),i] <- (TREC.ctr.index[i]+480*(j-3)-2):(TREC.ctr.index[i]+480*(j-3)+2)
}
}
g.value <- array(0/0,dim=c(n.TREC.ctr,6))  # g.value: the growth and decay, to be computed
box.track.list=mean.track.list=list()
# box.track.list: a list that tracks the TREC boxes
# mean.track.list: track the mean dBZ on each box
G.procedure <- FALSE
# if the growth/decay is computed; initial value should be FALSE; the value will be set to TRUE after the 3rd iterations
box.select.track <- array(0/0,dim=c(n.TREC.ctr, 7))
box.mean.track <- array(0/0,dim=c(n.TREC.ctr, 7))
# initial
scan.count <- which(scan.select == scan.select[scan.select.id.start]) # specify the starting scan
data0 <- (scan[[scan.id.select[scan.count]]]$data)@data # initial data
data0.TREC <- array(0/0,dim=c(n.TREC.ctr,1))
for (i in 1:n.TREC.ctr){
temp.data <- data0[box.id[,i],1]
weight <- exp( (temp.data-75)/30 )
#weight <- rep(1,length(temp.data))
na.rm <- !is.na(temp.data)
temp.data <- temp.data[na.rm]
weight <- weight[na.rm]
data0.TREC[i,1] <- sum(   temp.data*weight, na.rm=TRUE) / sum(weight)
}  # aggregate data for each TREC box
box.mean.track.initial  <- data0.TREC # initial dBZ on TREC boxes
box.select.initial <- c(1:n.TREC.ctr) # initial TREC box locations (indexed)
mean.track <- matrix(box.mean.track.initial,ncol=1)
box.track <- matrix(box.select.initial,ncol=1)
scan.i <- 0
output2.list <- list()
scan.select[scan.select.id.start:scan.select.id.end]
i.scan = 131
scan.i <- scan.i + 1
print(paste(Monsoon,"_",filenames[storm.id],"_",i.scan,sep=""))
scan.count <- which(scan.select == i.scan)
Time.target <- Time.select[scan.count + 7]
data <- (scan[[scan.id.select[scan.count]]]$data)@data
data2 <- (scan[[scan.id.select[scan.count+1]]]$data)@data
data.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="blue")
#plot(grd,add=TRUE)
image(data.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
Time.select[scan.count + 7]
paste("observed ",Time.select[scan.count],".pdf",sep="")
setwd(wd.figure);  pdf(file = paste("observed ",Time.select[scan.count],".pdf",sep=""), width=6, height=6)
data.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="blue")
#plot(grd,add=TRUE)
image(data.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
dev.off()
setwd(wd)
substr(Time.select[scan.count],12,19)
setwd(wd.figure);  pdf(file = paste("observed ",substr(Time.select[scan.count],12,19),".pdf",sep=""), width=6, height=6)
data.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="blue")
#plot(grd,add=TRUE)
image(data.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
dev.off()
setwd(wd)
setwd(wd.figure);  pdf(file = paste("observed_",substr(Time.select[scan.count],12,19),".pdf",sep=""), width=6, height=6)
data.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="blue")
#plot(grd,add=TRUE)
image(data.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
dev.off()
setwd(wd)
paste("observed_",substr(Time.select[scan.count],12,19),".pdf",sep="")
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="blue")
#plot(grd,add=TRUE)
image(data.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
title(Time.select[scan.count)
title(Time.select[scan.count])
paste("observed_",scan.i,".pdf",sep="")
setwd(wd.figure);  pdf(file = paste("observed_",scan.i,".pdf",sep=""), width=6, height=6)
data.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="blue")
#plot(grd,add=TRUE)
image(data.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
title(Time.select[scan.count])
dev.off()
setwd(wd)
setwd(wd.figure);  pdf(file = paste("observed_",scan.i+1,".pdf",sep=""), width=6, height=6)
data2.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data2),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(bbox(grd)[1,1],bbox(grd)[1,2]),ylim=c(bbox(grd)[2,1],bbox(grd)[2,2]),col="blue")
#plot(grd,add=TRUE)
image(data2.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
title(Time.select[scan.count+1])
dev.off()
setwd(wd)
grd.TREC.coords <- coordinates(grd.TREC)
# compute the velocity vectors
timing1 <- proc.time()
output1 <- parSapply(cl, c(1:8649),TREC.parallel1,
Data=data, Data2=data2, N.TREC.ctr=n.TREC.ctr, Box.id=box.id, Grd.TREC=grd.TREC.coords)
timing2 <- proc.time()-timing1
box_select <- output1[2,]
Cross_R <- output1[1,]
TREC.u <- coordinates(grd.TREC)[box_select,1] - coordinates(grd.TREC)[,1]
TREC.v <- coordinates(grd.TREC)[box_select,2] - coordinates(grd.TREC)[,2]
NARM <- FALSE  # this code is used to get rid of NA values, by setting all NA to zero
if (NARM){
TREC.u[is.na(TREC.u)] <- 0
TREC.v[is.na(TREC.v)] <- 0
}
# compute the smoothed velocity field
output2 <- parSapply(cl, c(1:8649),TREC.parallel2,
Grd.TREC=grd.TREC.coords, CRoss_R=Cross_R, TREC.U=TREC.u, TREC.V=TREC.v)
timing2 <- proc.time()-timing1
output2.list[[scan.i]] <- output2
TREC.u.s <-  output2[2,]
TREC.v.s <-  output2[3,]
box_select_revised <- output2[1,]
# need to modify box_select_revised
#box_unselected <- which( is.na(match(c(1:8649),box_select_revised)) )
#Dist <- array()
#j <- 0
#for (i in 2:length(box_select_revised)){
#  if ( sum(box_select_revised[i]==box_select_revised[1:(i-1)])>0 ){
#    j <- j+1
#    dist <- (coordinates(grd.TREC[box_select_revised[i]])[,1]-coordinates(grd.TREC[box_unselected])[,1])^2+(coordinates(grd.TREC[box_select_revised[i]])[,2]-coordinates(grd.TREC[box_unselected])[,2])^2
#   case <- which(dist==min(dist,na.rm=TRUE))[1]
#   Dist[j] <- sqrt(min(dist,na.rm=TRUE))
#   box_select_revised[i] <- box_unselected[case]
#    box_unselected <- box_unselected[-case]
#  }
#}
# Form a sequence of tracked features
# Get the data on TREC box
data2.TREC <- array(0/0,dim=c(n.TREC.ctr,1))
for (i in 1:n.TREC.ctr){
temp.data <- data2[box.id[,i],1]
weight <- exp( (temp.data-75)/30 )
#weight <- rep(1, length(temp.data))
na.rm <- !is.na(temp.data)
temp.data <- temp.data[na.rm]
weight <- weight[na.rm]
data2.TREC[i,1] <- sum(   temp.data*weight, na.rm=TRUE) / sum(weight)
}
#track.revised <- output2[1,][box.track[,scan.i]] # the issue here is that some vectors point to the same location
#for (i in 2:length(track.revised)){
#  if ( sum(track.revised[i]==track.revised[1:(i-1)])>0 ){track.revised[i]<-0/0}
#}
box.select.track[,scan.i] <-  box_select_revised[ box.track[,scan.i]  ]
box.mean.track[,scan.i]  <- data2.TREC[ box.select.track[,scan.i] ]
mean.track <- cbind(box.mean.track.initial, box.mean.track)
box.track <- cbind(box.select.initial, box.select.track)
box.track.list[[scan.i]] <- box.track
mean.track.list[[scan.i]] <- mean.track
filenames[storm.id]
setwd(wd.figure); png(file = paste(filenames[storm.id], "_windfield_",scan.i,".png",sep=""), width=10, height=6, units = "in", res=300)
par(mfrow=c(1,2))
par(mar=c(2,2,4,1))
data2.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(-10000,60000),col="blue")
#plot(grd,add=TRUE)
image(data2.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
arrows(coordinates(grd.TREC)[,1],coordinates(grd.TREC)[,2],
coordinates(grd.TREC)[,1]+TREC.u.s,
coordinates(grd.TREC)[,2]+TREC.v.s,length=0.04,col="blue",lwd=1)
title(paste(Time.select[scan.count],"(zoomed-in)",sep=" "))
data2.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(-10000,60000),col="blue")
#plot(grd,add=TRUE)
image(data2.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
arrows(coordinates(grd.TREC)[,1],coordinates(grd.TREC)[,2],
coordinates(grd.TREC)[,1]+TREC.u.s,
coordinates(grd.TREC)[,2]+TREC.v.s,length=0.04,col="blue",lwd=1)
title(paste(Time.select[scan.count],"(zoomed-in)",sep=" "))
dev.off()
setwd(wd.figure); png(file = paste(filenames[storm.id], "_windfield_",scan.i,".png",sep=""), width=10, height=6, units = "in", res=300)
par(mfrow=c(1,2))
par(mar=c(2,2,4,1))
data2.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(-10000,60000),col="blue")
#plot(grd,add=TRUE)
image(data2.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[1],at.points[length(at.points)]))
arrows(coordinates(grd.TREC)[,1],coordinates(grd.TREC)[,2],
coordinates(grd.TREC)[,1]+TREC.u.s,
coordinates(grd.TREC)[,2]+TREC.v.s,length=0.04,col="blue",lwd=1)
title(paste(Time.select[scan.count],"(zoomed-in)",sep=" "))
data2.spdf <- SpatialPixelsDataFrame(grd.p,data.frame(data),proj4string=CRS(SVY21))
plot(sgBd,axes=TRUE,xlim=c(-10000,60000),col="blue")
#plot(grd,add=TRUE)
image(data2.spdf,add=TRUE,col=colPalette1,zlim=c(at.points[11],at.points[length(at.points)]))
arrows(coordinates(grd.TREC)[,1],coordinates(grd.TREC)[,2],
coordinates(grd.TREC)[,1]+TREC.u.s,
coordinates(grd.TREC)[,2]+TREC.v.s,length=0.04,col="blue",lwd=1)
title(paste(Time.select[scan.count],"(zoomed-in)",sep=" "))
dev.off()
setwd(wd)
if (G.procedure){ # when scan.count is >= 2, we can start create the g.value matrix for growth and decay
i <- scan.i
case <- !is.na(box.track[,i])
grd.temp <- grd.TREC[box.track[case,i]]
#temp1 <- box.track[,i-1]
#temp2 <- box.track[,i+1]
g.value[,scan.i-1] <- ( mean.track[,i+1]-mean.track[,i-1] ) / 2
}
G.procedure <- TRUE
